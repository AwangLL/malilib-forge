
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

repositories {
    maven { url = "http://repo.spongepowered.org/maven" }
}

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

sourceCompatibility = targetCompatibility = 1.8

compileJava {
    sourceCompatibility = targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    mappings = config.mappings_version
    runDir = 'minecraft'
    makeObfSourceJar = false

    ext.mod_version = config.mod_version

    if (mod_version.endsWith('-dev')) {
        mod_version = mod_version + "." + new Date().format('yyyyMMdd.HHmmss')
    }

    replaceIn "MaLiLibReference.java"
    replace "@MOD_VERSION@", mod_version

    //        "-Dmixin.hotSwap=true",
    //        "-Dmixin.debug.export=true",
    //        "-Dmixin.debug.verbose=true",
    //        "-Dmixin.debug.countInjections=true"

    def args = [
            "-Dfml.coreMods.load=fi.dy.masa.malilib.core.MaLiLibCore",
            "-Dmixin.checks.interfaces=true"
    ]

    clientJvmArgs.addAll(args)
    serverJvmArgs.addAll(args)

    if (project.hasProperty("signJarKeyStore")) {
        replace "@FINGERPRINT@", signJarFingerprint
    }
}

sourceSets {
    main {
        ext.refMap = 'mixins.' + config.mod_id + '.refmap.json'
    }
}

group = config.group + "." + config.mod_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_file_name + '-' + config.minecraft_version_out
version = project.minecraft.mod_version

configurations {
    embed
    implementation.extendsFrom(embed)

    shade
    compile.extendsFrom shade
}

/*
mixin {
    defaultObfuscationEnv notch
}
*/

dependencies {
    shade('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: "asm-commons"
        exclude module: "asm-tree"
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "log4j-core"
        exclude module: "gson"
        exclude module: "commons-io"
    }
    
    compile 'org.jetbrains.java.decompiler:fernflower:sponge-SNAPSHOT'
}

//tasks.withType(Jar)*.baseName = archivesBaseName

processResources
{
    // Exclude the GIMP image files
    exclude '**/*.xcf'
    exclude '**/xcf'

    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_version", project.minecraft.mod_version
    inputs.property "minecraft_version", project.config.minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'mod_version': project.minecraft.mod_version, 'minecraft_version': project.config.minecraft_version
    }
      
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest.attributes(
            'FMLCorePlugin': 'fi.dy.masa.malilib.core.MaLiLibCore',
            'FMLCorePluginContainsFMLMod': 'fi.dy.masa.malilib.core.MaLiLib',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'ForceLoadAsMod': 'true',
            'TweakOrder': 0
    )
    
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
        from(project.zipTree(dep)){
            include 'META-INF/services', 'META-INF/services/**'
        }
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    // This classifier is standard and should not be changed
    classifier = 'deobf'
}

// This section enables the last two tasks
artifacts {
    //archives sourcesJar
    archives deobfJar
}

if (project.hasProperty("signJarKeyStore")) {
    task signJar(type: SignJar, dependsOn: reobfJar) {
        inputFile = jar.archivePath
        outputFile = jar.archivePath

        keyStore = signJarKeyStore
        alias = signJarAlias
        storePass = signJarStorePass
        keyPass = signJarKeyPass
    }

    build.dependsOn signJar
}

tasks.publish.dependsOn build
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName
            from components.java

            artifact deobfJar
            artifact sourceJar
        }
    }

    repositories {
        maven {
            url "$projectDir/../../CommonMaven"
        }
    }
}
